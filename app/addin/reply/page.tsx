'use client';

import { useEffect, useState } from 'react';
import Script from 'next/script';
import { useSearchParams } from 'next/navigation';

export default function GenerateReplyTaskpane() {
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedReply, setGeneratedReply] = useState('');
  const [error, setError] = useState('');
  const [officeReady, setOfficeReady] = useState(false);
  const searchParams = useSearchParams();
  const mode = searchParams.get('mode');

  useEffect(() => {
    // Wait for Office.js to load
    const checkOffice = () => {
      if (typeof window !== 'undefined' && (window as any).Office) {
        (window as any).Office.onReady((info: any) => {
          console.log('Office.js ready, host:', info.host);
          setOfficeReady(true);
          
          // Auto-generate if in generating mode
          if (mode === 'generating') {
            generateReplyFromEmail();
          }
        });
      } else {
        setTimeout(checkOffice, 100);
      }
    };

    checkOffice();
  }, [mode]);

  const generateReplyFromEmail = async () => {
    if (isGenerating) return;
    
    setIsGenerating(true);
    setError('');
    setGeneratedReply('');

    try {
      const Office = (window as any).Office;
      const item = Office?.context?.mailbox?.item;
      
      if (!item) {
        throw new Error('No email item found');
      }

      // Get email body
      const bodyResult = await new Promise<any>((resolve, reject) => {
        item.body.getAsync(Office.CoercionType.Text, (result: any) => {
          if (result.status === Office.AsyncResultStatus.Succeeded) {
            resolve(result);
          } else {
            reject(new Error(result.error.message));
          }
        });
      });

      const emailData = {
        originalSubject: item.subject || '',
        originalSender: item.from ? item.from.emailAddress : '',
        originalBody: bodyResult.value || '',
        context: 'outlook_addin'
      };

      console.log('Generating reply for email:', {
        subject: emailData.originalSubject,
        sender: emailData.originalSender,
        bodyLength: emailData.originalBody.length
      });

      const response = await fetch('/api/addin/generate-reply', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(emailData),
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const result = await response.json();

      if (result.success) {
        setGeneratedReply(result.reply);
      } else {
        throw new Error(result.error || 'Failed to generate reply');
      }

    } catch (error) {
      console.error('Error generating reply:', error);
      setError(`Failed to generate reply: ${error instanceof Error ? error.message : 'Unknown error'}`);
    } finally {
      setIsGenerating(false);
    }
  };

  const useGeneratedReply = async () => {
    if (!generatedReply) return;

    try {
      const Office = (window as any).Office;
      const item = Office?.context?.mailbox?.item;
      
      if (!item) {
        throw new Error('No email item found');
      }

      // Create reply with generated content
      const htmlBody = `
        <div style="font-family: Arial, sans-serif; font-size: 14px; line-height: 1.5;">
          ${generatedReply.split('\n').map(line => `<p>${line || '<br>'}</p>`).join('')}
          <br>
          <div style="font-size: 12px; color: #666; border-top: 1px solid #ccc; padding-top: 10px; margin-top: 20px;">
            <em>Generated by BlocIQ AI Assistant</em>
          </div>
        </div>
      `;

      await new Promise<void>((resolve, reject) => {
        item.reply.displayAsync(
          { htmlBody },
          (result: any) => {
            if (result.status === Office.AsyncResultStatus.Succeeded) {
              resolve();
            } else {
              reject(new Error(result.error.message));
            }
          }
        );
      });

      // Show success message
      showNotification('Success', 'Reply generated and opened for review');
      
      // Close the taskpane after a short delay
      setTimeout(() => {
        window.close();
      }, 2000);

    } catch (error) {
      console.error('Error using generated reply:', error);
      setError(`Failed to create reply: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  };

  const showNotification = (title: string, message: string) => {
    try {
      const Office = (window as any).Office;
      Office?.context?.mailbox?.item?.notificationMessages?.addAsync?.(
        'blociq_notification',
        {
          type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,
          message: message,
          icon: 'Icon.16x16',
          persistent: false
        }
      );
    } catch (error) {
      console.error('Error showing notification:', error);
    }
  };

  const regenerateReply = () => {
    generateReplyFromEmail();
  };

  return (
    <>
      <Script 
        src="https://appsforoffice.microsoft.com/lib/1/hosted/office.js" 
        strategy="beforeInteractive"
      />
      
      <div className="h-screen flex flex-col bg-white">
        {/* Header */}
        <div className="bg-gradient-to-r from-indigo-600 to-purple-600 text-white p-4 text-center shadow-lg">
          <h1 className="text-lg font-semibold m-0">⚡ Generate Reply</h1>
          <p className="text-xs opacity-90 mt-1 mb-0">AI-powered email response generation</p>
        </div>

        {/* Content */}
        <div className="flex-1 flex flex-col p-5 overflow-hidden">
          {mode === 'generating' && isGenerating && (
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-4 text-center">
              <div className="w-8 h-8 border-2 border-blue-300 border-t-blue-600 rounded-full animate-spin mx-auto mb-3"></div>
              <p className="text-blue-800 font-medium">Generating your reply...</p>
              <p className="text-blue-600 text-sm mt-1">Analyzing email content and crafting response</p>
            </div>
          )}

          {!mode && !isGenerating && !generatedReply && (
            <div className="text-center py-8">
              <div className="text-6xl mb-4">🤖</div>
              <h2 className="text-xl font-semibold text-gray-800 mb-3">Ready to Generate</h2>
              <p className="text-gray-600 mb-6 leading-relaxed">
                I'll analyze the current email and generate a professional reply for you.
                Click the button below to get started.
              </p>
              <button
                onClick={generateReplyFromEmail}
                disabled={!officeReady}
                className="bg-gradient-to-r from-indigo-600 to-purple-600 text-white px-8 py-3 rounded-lg font-medium transition-all hover:shadow-lg disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {officeReady ? 'Generate Reply' : 'Loading...'}
              </button>
            </div>
          )}

          {error && (
            <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-4">
              <div className="flex items-start">
                <span className="text-red-500 text-xl mr-3">⚠️</span>
                <div>
                  <h3 className="font-semibold text-red-800">Error</h3>
                  <p className="text-red-700 text-sm mt-1">{error}</p>
                  <button
                    onClick={regenerateReply}
                    className="mt-3 bg-red-100 text-red-800 px-4 py-2 rounded text-sm hover:bg-red-200 transition-colors"
                  >
                    Try Again
                  </button>
                </div>
              </div>
            </div>
          )}

          {generatedReply && (
            <div className="flex-1 flex flex-col">
              <div className="flex items-center justify-between mb-4">
                <h3 className="font-semibold text-gray-800">Generated Reply</h3>
                <button
                  onClick={regenerateReply}
                  className="text-indigo-600 text-sm hover:text-indigo-800 transition-colors"
                >
                  🔄 Regenerate
                </button>
              </div>
              
              <div className="flex-1 bg-gray-50 border border-gray-200 rounded-lg p-4 mb-4 overflow-y-auto">
                <pre className="whitespace-pre-wrap text-sm text-gray-800 font-sans">
                  {generatedReply}
                </pre>
              </div>

              <div className="flex gap-3">
                <button
                  onClick={useGeneratedReply}
                  className="flex-1 bg-gradient-to-r from-indigo-600 to-purple-600 text-white py-3 rounded-lg font-medium transition-all hover:shadow-lg"
                >
                  ✉️ Use This Reply
                </button>
                <button
                  onClick={regenerateReply}
                  className="px-6 bg-gray-100 text-gray-700 py-3 rounded-lg font-medium border border-gray-300 transition-all hover:bg-gray-200"
                >
                  🔄 Regenerate
                </button>
              </div>
            </div>
          )}
        </div>

        {/* Footer */}
        <div className="border-t border-gray-200 p-3 bg-gray-50 text-center">
          <p className="text-xs text-gray-500">
            💡 The generated reply will open in a new compose window for you to review and edit
          </p>
        </div>
      </div>
    </>
  );
}