import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@/lib/supabase/server';
import { createClient as createServiceClient } from '@supabase/supabase-js';

export const maxDuration = 120; // 2 minutes for AI analysis

export async function POST(req: NextRequest) {
  try {
    // Use service role client for internal processing
    const serviceSupabase = createServiceClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.SUPABASE_SERVICE_ROLE_KEY!
    );

    const { jobId, extractedText, filename, mime, userId, buildingId, assetId } = await req.json();

    if (!jobId || !extractedText) {
      return NextResponse.json({
        error: 'Missing required data',
        message: 'Job ID and extracted text are required'
      }, { status: 400 });
    }

    console.log('üè¢ Processing compliance document analysis:', filename, 'for job:', jobId);

    // Get building compliance asset context
    const { data: bcaData, error: bcaError } = await serviceSupabase
      .from('building_compliance_assets')
      .select(`
        id,
        compliance_asset_id,
        compliance_assets(name, category, description)
      `)
      .eq('building_id', buildingId)
      .eq('compliance_asset_id', assetId)
      .single();

    const assetInfo = bcaData?.compliance_assets as any;

    // Create a comprehensive compliance analysis similar to lease analysis but focused on compliance
    const analysisPrompt = `
Analyze this UK compliance document with comprehensive detail for a leasehold block management platform called BlocIQ. Extract ALL information systematically and create a detailed report. Return ONLY a valid JSON object - no markdown formatting or code blocks:

{
  "doc_type": "compliance",
  "executive_summary": "Comprehensive overview like: This is a [document type] for [property] conducted on [date]. The inspection found [key findings]. Current status is [compliant/non-compliant]. Next action required: [action] by [date]. Key concerns: [issues if any].",
  "basic_document_details": {
    "document_type": "e.g. Fire Risk Assessment, EICR, Gas Safety Certificate",
    "classification": "Primary classification of the document",
    "inspection_date": "YYYY-MM-DD format or null",
    "next_due_date": "YYYY-MM-DD format or null",
    "certificate_number": "Certificate or reference number if found",
    "inspector_details": {
      "name": "Inspector/contractor name",
      "company": "Company name",
      "qualifications": "Any qualifications mentioned"
    },
    "property_details": {
      "address": "Property address if mentioned",
      "building_name": "Building name if mentioned"
    }
  },
  "detailed_sections": [
    {
      "section_title": "Compliance Status",
      "content": [
        "Overall compliance status: [Pass/Fail/Satisfactory/Unsatisfactory]",
        "Summary of findings and observations",
        "Any defects or issues identified"
      ],
      "referenced_clauses": ["Page references and section citations"]
    },
    {
      "section_title": "Key Findings",
      "content": [
        "List all findings, defects, observations",
        "Category 1, 2, 3 issues (if applicable)",
        "Priority actions required"
      ],
      "referenced_clauses": ["Relevant sections or pages"]
    },
    {
      "section_title": "Actions Required",
      "content": [
        "Immediate actions needed",
        "Recommended actions",
        "Review and renewal requirements"
      ],
      "referenced_clauses": ["Action item references"]
    },
    {
      "section_title": "Dates and Renewals",
      "content": [
        "Next inspection due: [date]",
        "Certificate expiry: [date]",
        "Recommended review frequency"
      ],
      "referenced_clauses": ["Date references in document"]
    }
  ],
  "compliance_requirements": [
    {
      "requirement_title": "Legal Compliance",
      "description": "Legal requirements and regulations mentioned",
      "status": "Met/Not Met/Partial",
      "referenced_clauses": ["Legal reference citations"]
    },
    {
      "requirement_title": "Safety Standards",
      "description": "Safety standards and codes referenced",
      "status": "Met/Not Met/Partial",
      "referenced_clauses": ["Standard citations"]
    }
  ],
  "recommendations": [
    {
      "priority": "High/Medium/Low",
      "action": "Specific recommendation",
      "timeframe": "When it should be completed",
      "responsible_party": "Who should complete it"
    }
  ],
  "extracted_text_preview": "First 500 characters of the document for reference...",
  "disclaimer": "This analysis is generated by artificial intelligence and is for informational purposes only. It should not be considered as professional advice. Always consult with qualified professionals for compliance matters."
}

CRITICAL INSTRUCTIONS:
1. Extract EVERY finding, defect, and recommendation comprehensively
2. Include specific references to pages, sections, or clause numbers where found
3. Identify compliance status clearly (pass/fail/satisfactory/unsatisfactory)
4. Extract ALL dates including inspection, expiry, and next due dates
5. List specific actions required with urgency levels
6. Include inspector/contractor details and qualifications
7. The executive_summary should be comprehensive explaining the document type, findings, status, and required actions
8. For safety documents, categorize findings by severity/priority
9. Include the disclaimer exactly as provided
10. Return ONLY the JSON object, no other text or formatting

Document text to analyze:
${extractedText.substring(0, 60000)}
`;

    console.log('ü§ñ Calling OpenAI API for compliance analysis...');
    console.log('üìä Text length:', extractedText.length, 'characters');

    const openaiResponse = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o',
        messages: [
          {
            role: 'system',
            content: 'You are a professional compliance document analysis service specializing in UK building safety and compliance documents. Your task is to extract EVERY detail from compliance documents with thoroughness similar to professional compliance services. Create detailed sections for ALL compliance aspects including: document details, compliance status, key findings, actions required, dates and renewals, legal compliance, safety standards, and recommendations. Include specific references and extract exact wording, dates, and requirements. Match professional formatting and comprehensive coverage. Return ONLY valid JSON - no markdown, no explanations, no code blocks.'
          },
          {
            role: 'user',
            content: analysisPrompt
          }
        ],
        temperature: 0.1,
        max_tokens: 6000
      })
    });

    if (!openaiResponse.ok) {
      const errorText = await openaiResponse.text();
      console.error('‚ùå OpenAI API error response:', {
        status: openaiResponse.status,
        statusText: openaiResponse.statusText,
        body: errorText
      });
      throw new Error(`OpenAI API failed: ${openaiResponse.status} - ${errorText}`);
    }

    const openaiResult = await openaiResponse.json();
    console.log('üìã OpenAI response received:', {
      usage: openaiResult.usage,
      choicesLength: openaiResult.choices?.length || 0
    });

    const analysisText = openaiResult.choices[0]?.message?.content;

    if (!analysisText) {
      console.error('‚ùå No analysis content in OpenAI response:', openaiResult);

      // Create a basic fallback analysis
      const fallbackAnalysis = {
        doc_type: 'compliance',
        executive_summary: `Analysis for ${filename}`,
        basic_document_details: {
          document_type: filename.includes('fire') ? 'Fire Risk Assessment' :
                         filename.includes('electrical') || filename.includes('eicr') ? 'EICR' :
                         filename.includes('gas') ? 'Gas Safety Certificate' : 'Other',
          classification: 'Compliance Document',
          inspection_date: null,
          next_due_date: null
        },
        detailed_sections: [
          {
            section_title: 'Processing Status',
            content: [
              `‚úÖ Document uploaded: ${filename}`,
              `‚úÖ Text extraction completed: ${extractedText.length.toLocaleString()} characters`,
              `‚ö†Ô∏è AI analysis failed - manual review needed`
            ],
            referenced_clauses: ['System processing log']
          }
        ],
        compliance_requirements: [],
        recommendations: [],
        extracted_text_preview: extractedText.substring(0, 500),
        confidence: 0.1,
        notes: ['Analysis could not be completed - please try reprocessing'],
        processed_at: new Date().toISOString()
      };

      console.log('üîÑ Using fallback analysis due to OpenAI failure');
      return NextResponse.json({
        success: true,
        summary: fallbackAnalysis,
        jobId,
        analysisLength: JSON.stringify(fallbackAnalysis).length
      });
    }

    console.log('üìù Analysis text length:', analysisText.length, 'characters');

    // Parse the JSON response - handle markdown code blocks
    let summary;
    try {
      // Clean the response text - remove markdown code blocks if present
      let cleanedText = analysisText.trim();

      // Remove ```json and ``` markers if present
      if (cleanedText.startsWith('```json')) {
        cleanedText = cleanedText.replace(/^```json\s*/, '').replace(/\s*```$/, '');
      } else if (cleanedText.startsWith('```')) {
        cleanedText = cleanedText.replace(/^```\s*/, '').replace(/\s*```$/, '');
      }

      console.log('üîç Attempting to parse cleaned JSON response...');
      summary = JSON.parse(cleanedText);
      console.log('‚úÖ Successfully parsed AI compliance analysis JSON');

    } catch (parseError) {
      console.error('‚ùå Failed to parse OpenAI response after cleaning:', parseError.message);
      console.error('Raw response length:', analysisText.length);
      console.error('Cleaned response preview:', analysisText.replace(/^```json\s*/, '').replace(/\s*```$/, '').substring(0, 300));

      // Create a fallback summary that matches UI expectations
      const textPreview = extractedText.substring(0, 2000);
      const hasComplianceTerms = /fire|electrical|gas|safety|inspection|certificate|compliance/i.test(textPreview);

      summary = {
        doc_type: 'compliance',
        executive_summary: `Analysis of ${filename} completed with ${extractedText.length.toLocaleString()} characters extracted. ${hasComplianceTerms ? 'Compliance-related content was detected.' : 'Document processed successfully.'} AI parsing encountered issues, but the full document text is available for review.`,
        basic_document_details: {
          document_type: filename.includes('fire') ? 'Fire Risk Assessment' :
                         filename.includes('electrical') || filename.includes('eicr') ? 'EICR' :
                         filename.includes('gas') ? 'Gas Safety Certificate' : 'Other',
          classification: hasComplianceTerms ? 'Compliance Document' : 'Unknown',
          inspection_date: null,
          next_due_date: null,
          certificate_number: null,
          inspector_details: {
            name: null,
            company: null,
            qualifications: null
          },
          property_details: {
            address: null,
            building_name: null
          }
        },
        detailed_sections: [
          {
            section_title: 'Processing Status',
            content: [
              `‚úÖ Document uploaded: ${filename}`,
              `‚úÖ OCR completed: ${extractedText.length.toLocaleString()} characters extracted`,
              `‚ö†Ô∏è AI analysis parsing failed - manual review needed`,
              `üìÑ Full document text is available for detailed review`
            ],
            referenced_clauses: ['System processing log']
          }
        ],
        compliance_requirements: [],
        recommendations: [
          {
            priority: 'High',
            action: 'Manual review of document required due to analysis parsing failure',
            timeframe: 'As soon as possible',
            responsible_party: 'Building Management'
          }
        ],
        extracted_text_preview: extractedText.substring(0, 500),
        disclaimer: 'This analysis encountered technical parsing issues. The document has been successfully processed and text extracted. Please review the content manually or try reprocessing.',
        unknowns: ['AI parsing failed - reprocessing recommended', 'Manual review required for detailed analysis']
      };
    }

    console.log('‚úÖ AI compliance analysis completed for job:', jobId);

    // Update the document_jobs table with the analysis results
    const { error: updateError } = await serviceSupabase
      .from('document_jobs')
      .update({
        summary_json: summary,
        updated_at: new Date().toISOString()
      })
      .eq('id', jobId);

    if (updateError) {
      console.error('‚ùå Failed to update document_jobs with analysis:', updateError);
      // Don't fail the whole request, just log the error
    } else {
      console.log('‚úÖ Successfully updated document_jobs with compliance analysis for job:', jobId);
    }

    return NextResponse.json({
      success: true,
      summary,
      jobId,
      analysisLength: analysisText.length
    });

  } catch (error) {
    console.error('‚ùå Compliance AI analysis error:', error);
    return NextResponse.json({
      error: 'Analysis failed',
      message: error instanceof Error ? error.message : 'AI analysis failed. Please try again.'
    }, { status: 500 });
  }
}