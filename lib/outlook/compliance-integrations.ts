/**
 * Outlook Integration Services for BSA Compliance
 * Calendar events, tasks, and email alerts for compliance documents
 */

import { getOutlookClient } from '@/lib/outlookClient';
import { BSAComplianceStatus } from '@/lib/compliance/bsa-analyzers';

export interface ComplianceCalendarEvent {
  subject: string;
  start: string;
  end: string;
  body: string;
  reminderMinutesBeforeStart: number;
  categories: string[];
  importance: 'low' | 'normal' | 'high';
  isReminderOn: boolean;
}

export interface ComplianceTask {
  subject: string;
  body: string;
  dueDateTime: string;
  importance: 'low' | 'normal' | 'high';
  categories: string[];
  status: 'notStarted' | 'inProgress' | 'completed';
}

export interface ComplianceEmail {
  subject: string;
  body: string;
  toRecipients: Array<{
    emailAddress: {
      address: string;
      name?: string;
    };
  }>;
  ccRecipients?: Array<{
    emailAddress: {
      address: string;
      name?: string;
    };
  }>;
  importance: 'low' | 'normal' | 'high';
  categories: string[];
  attachments?: Array<{
    name: string;
    contentBytes: string;
    contentType: string;
  }>;
}

/**
 * Create calendar reminder for compliance renewal
 */
export async function createComplianceCalendarEvent(
  documentType: string,
  buildingName: string,
  assetName: string,
  nextDueDate: string,
  complianceStatus: BSAComplianceStatus,
  isGoldenThread: boolean,
  aiSummary: string,
  documentLink?: string
): Promise<{ eventId: string; webLink: string }> {
  const client = await getOutlookClient();
  const dueDate = new Date(nextDueDate);

  // Calendar event 30 days before due date
  const reminderDate = new Date(dueDate.getTime() - 30 * 24 * 60 * 60 * 1000);
  const endTime = new Date(reminderDate.getTime() + 60 * 60 * 1000); // 1 hour duration

  const priority = complianceStatus === 'expired' ? 'high' : 'normal';
  const urgencyIcon = complianceStatus === 'expired' ? 'üö®' : 'üîî';
  const goldenThreadText = isGoldenThread ? '\n\nüîó GOLDEN THREAD: This document is part of the Building Safety Act Golden Thread of information for Higher Risk Buildings.' : '';

  const eventData: ComplianceCalendarEvent = {
    subject: `${urgencyIcon} ${documentType} Renewal - ${buildingName} (${assetName})`,
    start: reminderDate.toISOString(),
    end: endTime.toISOString(),
    body: `
Building Safety Act Compliance Reminder

Building: ${buildingName}
Asset: ${assetName}
Document Type: ${documentType}
Due Date: ${dueDate.toLocaleDateString('en-GB')}
Current Status: ${complianceStatus.toUpperCase()}

${complianceStatus === 'expired'
  ? '‚ö†Ô∏è URGENT: This compliance document has EXPIRED and requires immediate renewal.'
  : 'üìÖ This compliance document is due for renewal soon.'}

AI Analysis Summary:
${aiSummary}

${documentLink ? `View Document: ${documentLink}` : ''}
${goldenThreadText}

Please arrange for inspection/testing to maintain Building Safety Act compliance.

Generated by BlocIQ Compliance System
    `.trim(),
    reminderMinutesBeforeStart: complianceStatus === 'expired' ? 0 : 1440, // No delay for expired, 24h for others
    categories: ['Building Safety Act', 'Compliance', documentType],
    importance: priority,
    isReminderOn: true
  };

  try {
    const response = await client.api('/me/events').post(eventData);
    return {
      eventId: response.id,
      webLink: response.webLink || ''
    };
  } catch (error) {
    console.error('Failed to create calendar event:', error);
    throw new Error(`Failed to create Outlook calendar event: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}

/**
 * Create Outlook task for remedial actions
 */
export async function createComplianceTask(
  documentType: string,
  buildingName: string,
  assetName: string,
  complianceStatus: BSAComplianceStatus,
  findings: string[],
  actionsRequired: string[],
  responsibleParty: string,
  dueDate?: string,
  isGoldenThread?: boolean,
  documentLink?: string
): Promise<{ taskId: string; webLink: string }> {
  const client = await getOutlookClient();

  const priority = complianceStatus === 'non_compliant' ? 'high' : 'normal';
  const urgencyIcon = complianceStatus === 'non_compliant' ? '‚ö†Ô∏è' : 'üìã';
  const goldenThreadText = isGoldenThread ? '\n\nüîó GOLDEN THREAD: This action is part of the Building Safety Act Golden Thread requirements.' : '';

  const taskData: ComplianceTask = {
    subject: `${urgencyIcon} ${buildingName} ‚Äì ${assetName} Remedial Action Required`,
    body: `
Building Safety Act Compliance Task

Building: ${buildingName}
Asset: ${assetName}
Document Type: ${documentType}
Status: ${complianceStatus.toUpperCase()}
Responsible Party: ${responsibleParty}

FINDINGS:
${findings.map(f => `‚Ä¢ ${f}`).join('\n')}

ACTIONS REQUIRED:
${actionsRequired.map(a => `‚Ä¢ ${a}`).join('\n')}

${documentLink ? `\nView Original Document: ${documentLink}` : ''}
${goldenThreadText}

This task was auto-generated from compliance document analysis.
Complete this task to maintain Building Safety Act compliance.

Generated by BlocIQ Compliance System
    `.trim(),
    dueDateTime: dueDate ? new Date(dueDate).toISOString() : new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(), // Default 7 days
    importance: priority,
    categories: ['Building Safety Act', 'Compliance', 'Remedial Action'],
    status: 'notStarted'
  };

  try {
    const response = await client.api('/me/todo/lists/tasks/tasks').post(taskData);
    return {
      taskId: response.id,
      webLink: response.webLink || ''
    };
  } catch (error) {
    console.error('Failed to create task:', error);
    throw new Error(`Failed to create Outlook task: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}

/**
 * Create email alert for high-risk findings
 */
export async function createComplianceEmailAlert(
  documentType: string,
  buildingName: string,
  assetName: string,
  complianceStatus: BSAComplianceStatus,
  riskLevel: string,
  findings: string[],
  actionsRequired: string[],
  recipients: string[],
  ccRecipients?: string[],
  isGoldenThread?: boolean,
  documentAttachment?: {
    name: string;
    content: string;
    contentType: string;
  }
): Promise<{ messageId: string; webLink: string }> {
  const client = await getOutlookClient();

  const priority = riskLevel === 'intolerable' || complianceStatus === 'non_compliant' ? 'high' : 'normal';
  const urgencyIcon = priority === 'high' ? 'üö®' : '‚ö†Ô∏è';
  const goldenThreadText = isGoldenThread ? '\n\nüîó GOLDEN THREAD: This finding affects Building Safety Act Golden Thread compliance for Higher Risk Buildings.' : '';

  const emailData: ComplianceEmail = {
    subject: `${urgencyIcon} Immediate Action Required ‚Äì ${assetName} ${buildingName}`,
    body: `
BUILDING SAFETY ACT COMPLIANCE ALERT

Building: ${buildingName}
Asset: ${assetName}
Document Type: ${documentType}
Compliance Status: ${complianceStatus.toUpperCase()}
Risk Level: ${riskLevel.toUpperCase()}

${priority === 'high'
  ? 'üö® IMMEDIATE ACTION REQUIRED - High risk findings detected that require urgent attention.'
  : '‚ö†Ô∏è ACTION REQUIRED - Compliance issues identified that need addressing.'}

CRITICAL FINDINGS:
${findings.map(f => `‚Ä¢ ${f}`).join('\n')}

REQUIRED ACTIONS:
${actionsRequired.map(a => `‚Ä¢ ${a}`).join('\n')}

${goldenThreadText}

Please review the attached document and take immediate action to address these compliance issues.

If this involves intolerable risk, consider whether regulatory notification is required under relevant legislation.

This alert was automatically generated following AI analysis of compliance documents.

Generated by BlocIQ Compliance System
Date: ${new Date().toLocaleString('en-GB')}
    `.trim(),
    toRecipients: recipients.map(email => ({
      emailAddress: { address: email }
    })),
    ccRecipients: ccRecipients?.map(email => ({
      emailAddress: { address: email }
    })),
    importance: priority,
    categories: ['Building Safety Act', 'Compliance Alert', 'Urgent'],
    attachments: documentAttachment ? [{
      name: documentAttachment.name,
      contentBytes: documentAttachment.content,
      contentType: documentAttachment.contentType
    }] : undefined
  };

  try {
    // Create draft email (don't send automatically for safety)
    const response = await client.api('/me/messages').post(emailData);
    return {
      messageId: response.id,
      webLink: response.webLink || ''
    };
  } catch (error) {
    console.error('Failed to create email alert:', error);
    throw new Error(`Failed to create Outlook email alert: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}

/**
 * Update task completion status when building_todo is completed
 */
export async function updateComplianceTaskStatus(
  taskId: string,
  completed: boolean,
  completionNotes?: string
): Promise<void> {
  const client = await getOutlookClient();

  const updateData = {
    status: completed ? 'completed' : 'inProgress',
    ...(completionNotes && {
      body: {
        content: completionNotes,
        contentType: 'text'
      }
    })
  };

  try {
    await client.api(`/me/todo/lists/tasks/tasks/${taskId}`).patch(updateData);
  } catch (error) {
    console.error('Failed to update task status:', error);
    throw new Error(`Failed to update Outlook task: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}

/**
 * Create compliance overview email for property managers
 */
export async function createComplianceOverviewEmail(
  buildingName: string,
  complianceSummary: Array<{
    assetName: string;
    documentType: string;
    status: BSAComplianceStatus;
    nextDueDate?: string;
    findings: string[];
  }>,
  recipients: string[]
): Promise<{ messageId: string; webLink: string }> {
  const client = await getOutlookClient();

  const criticalCount = complianceSummary.filter(item =>
    item.status === 'non_compliant' || item.status === 'expired'
  ).length;

  const emailData: ComplianceEmail = {
    subject: `üìä Compliance Overview - ${buildingName} ${criticalCount > 0 ? '(Action Required)' : ''}`,
    body: `
BUILDING SAFETY ACT COMPLIANCE OVERVIEW

Building: ${buildingName}
Report Generated: ${new Date().toLocaleString('en-GB')}

SUMMARY:
‚Ä¢ Total Assets: ${complianceSummary.length}
‚Ä¢ Critical Issues: ${criticalCount}
‚Ä¢ Compliant: ${complianceSummary.filter(item => item.status === 'compliant').length}

ASSET DETAILS:
${complianceSummary.map(item => `
${item.assetName} (${item.documentType})
  Status: ${item.status.toUpperCase()}
  ${item.nextDueDate ? `Next Due: ${new Date(item.nextDueDate).toLocaleDateString('en-GB')}` : ''}
  ${item.findings.length > 0 ? `Findings: ${item.findings.join(', ')}` : ''}
`).join('\n')}

${criticalCount > 0 ? '‚ö†Ô∏è Immediate attention required for critical compliance issues.' : '‚úÖ All compliance requirements are up to date.'}

This overview was automatically generated by BlocIQ Compliance System.
    `.trim(),
    toRecipients: recipients.map(email => ({
      emailAddress: { address: email }
    })),
    importance: criticalCount > 0 ? 'high' : 'normal',
    categories: ['Building Safety Act', 'Compliance Overview']
  };

  try {
    const response = await client.api('/me/messages').post(emailData);
    return {
      messageId: response.id,
      webLink: response.webLink || ''
    };
  } catch (error) {
    console.error('Failed to create overview email:', error);
    throw new Error(`Failed to create compliance overview email: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}