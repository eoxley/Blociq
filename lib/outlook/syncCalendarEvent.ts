import { getValidAccessToken } from '@/lib/outlookAuth';

export interface BuildingComplianceAsset {
  id: string;
  building_id: number;
  asset_id: string;
  status: string;
  next_due_date: string | null;
  notes: string | null;
  calendar_event_id: string | null;
  compliance_assets: {
    id: string;
    name: string;
    category: string;
    description: string | null;
  } | null;
  buildings: {
    id: string;
    name: string;
    is_hrb: boolean;
  } | null;
}

export interface SyncResult {
  success: boolean;
  eventId?: string;
  action: 'created' | 'updated' | 'skipped' | 'error';
  error?: string;
}

/**
 * Sync a single compliance asset to Outlook calendar
 */
export async function syncComplianceAssetToOutlook(
  asset: BuildingComplianceAsset
): Promise<SyncResult> {
  try {
    // Validate required data
    if (!asset.next_due_date) {
      return {
        success: false,
        action: 'skipped',
        error: 'No due date specified'
      };
    }

    if (!asset.compliance_assets?.name || !asset.buildings?.name) {
      return {
        success: false,
        action: 'skipped',
        error: 'Missing asset or building information'
      };
    }

    // Get valid access token
    const accessToken = await getValidAccessToken();

    // Create event subject and body
    const subject = `Compliance Due: ${asset.compliance_assets.name} ‚Äì ${asset.buildings.name}`;
    const dueDate = new Date(asset.next_due_date);
    const startTime = new Date(dueDate);
    startTime.setHours(9, 0, 0, 0); // 9:00 AM
    const endTime = new Date(dueDate);
    endTime.setHours(10, 0, 0, 0); // 10:00 AM

    const eventBody = {
      subject,
      body: {
        contentType: 'HTML',
        content: `
          <div style="font-family: Arial, sans-serif; max-width: 600px;">
            <h2 style="color: #d32f2f;">üìã Compliance Due</h2>
            <p><strong>Asset:</strong> ${asset.compliance_assets.name}</p>
            <p><strong>Building:</strong> ${asset.buildings.name}</p>
            <p><strong>Category:</strong> ${asset.compliance_assets.category}</p>
            <p><strong>Due Date:</strong> ${dueDate.toLocaleDateString('en-GB', {
              weekday: 'long',
              year: 'numeric',
              month: 'long',
              day: 'numeric'
            })}</p>
            <p><strong>Status:</strong> ${asset.status}</p>
            ${asset.notes ? `<p><strong>Notes:</strong> ${asset.notes}</p>` : ''}
            ${asset.compliance_assets.description ? `<p><strong>Description:</strong> ${asset.compliance_assets.description}</p>` : ''}
            <hr style="border: 1px solid #e0e0e0; margin: 20px 0;">
            <p style="color: #666; font-size: 14px;">
              This compliance requirement is due for renewal. Please ensure it is completed before the due date.
            </p>
            <p style="color: #666; font-size: 12px;">
              Generated by BlocIQ on ${new Date().toLocaleDateString('en-GB')}
            </p>
          </div>
        `
      },
      start: {
        dateTime: startTime.toISOString(),
        timeZone: 'Europe/London'
      },
      end: {
        dateTime: endTime.toISOString(),
        timeZone: 'Europe/London'
      },
      reminderMinutesBeforeStart: 4320, // 3 days (3 * 24 * 60)
      importance: 'high',
      showAs: 'busy',
      categories: ['Compliance', 'BlocIQ', asset.compliance_assets.category],
      isAllDay: false
    };

    // Check if event already exists
    if (asset.calendar_event_id) {
      try {
        // Try to update existing event
        const updateResponse = await fetch(
          `https://graph.microsoft.com/v1.0/me/events/${asset.calendar_event_id}`,
          {
            method: 'PATCH',
            headers: {
              'Authorization': `Bearer ${accessToken}`,
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(eventBody)
          }
        );

        if (updateResponse.ok) {
          console.log('‚úÖ Updated existing compliance calendar event:', asset.calendar_event_id);
          return {
            success: true,
            eventId: asset.calendar_event_id,
            action: 'updated'
          };
        } else {
          console.warn('‚ö†Ô∏è Failed to update existing event, will create new one');
        }
      } catch (updateError) {
        console.warn('‚ö†Ô∏è Error updating existing event, will create new one:', updateError);
      }
    }

    // Create new event
    const createResponse = await fetch('https://graph.microsoft.com/v1.0/me/events', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${accessToken}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(eventBody)
    });

    if (!createResponse.ok) {
      const errorData = await createResponse.text();
      console.error('‚ùå Failed to create Outlook event:', {
        status: createResponse.status,
        statusText: createResponse.statusText,
        error: errorData
      });
      
      return {
        success: false,
        action: 'error',
        error: `Failed to create Outlook event: ${createResponse.status} ${createResponse.statusText}`
      };
    }

    const eventData = await createResponse.json();
    console.log('‚úÖ Created new compliance calendar event:', eventData.id);

    return {
      success: true,
      eventId: eventData.id,
      action: 'created'
    };

  } catch (error) {
    console.error('‚ùå Error syncing compliance asset to Outlook:', error);
    return {
      success: false,
      action: 'error',
      error: error instanceof Error ? error.message : 'Unknown error'
    };
  }
}

/**
 * Sync multiple compliance assets to Outlook calendar
 */
export async function syncMultipleComplianceAssetsToOutlook(
  assets: BuildingComplianceAsset[]
): Promise<{
  success: boolean;
  results: SyncResult[];
  summary: {
    total: number;
    created: number;
    updated: number;
    skipped: number;
    errors: number;
  };
}> {
  const results: SyncResult[] = [];
  let created = 0;
  let updated = 0;
  let skipped = 0;
  let errors = 0;

  for (const asset of assets) {
    const result = await syncComplianceAssetToOutlook(asset);
    results.push(result);

    switch (result.action) {
      case 'created':
        created++;
        break;
      case 'updated':
        updated++;
        break;
      case 'skipped':
        skipped++;
        break;
      case 'error':
        errors++;
        break;
    }
  }

  return {
    success: errors === 0,
    results,
    summary: {
      total: assets.length,
      created,
      updated,
      skipped,
      errors
    }
  };
}
