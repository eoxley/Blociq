/**
 * Major Works Outlook Integration Services
 * Calendar events, tasks, and email drafts for Section 20 consultations and major works
 */

import { getOutlookClient } from '@/lib/outlookClient';
import { Section20Stage, Section20AnalysisResult } from '@/lib/major-works/section20-analyzers';

export interface MajorWorksCalendarEvent {
  subject: string;
  start: string;
  end: string;
  body: string;
  reminderMinutesBeforeStart: number;
  categories: string[];
  importance: 'low' | 'normal' | 'high';
  isReminderOn: boolean;
  location?: string;
}

export interface MajorWorksTask {
  subject: string;
  body: string;
  dueDateTime: string;
  importance: 'low' | 'normal' | 'high';
  categories: string[];
  status: 'notStarted' | 'inProgress' | 'completed';
}

export interface MajorWorksEmail {
  subject: string;
  body: string;
  toRecipients: Array<{
    emailAddress: {
      address: string;
      name?: string;
    };
  }>;
  ccRecipients?: Array<{
    emailAddress: {
      address: string;
      name?: string;
    };
  }>;
  importance: 'low' | 'normal' | 'high';
  categories: string[];
  attachments?: Array<{
    name: string;
    contentBytes: string;
    contentType: string;
  }>;
}

/**
 * Create calendar events for Section 20 consultation deadlines
 */
export async function createSection20CalendarEvent(
  stage: Section20Stage,
  buildingName: string,
  projectTitle: string,
  deadlineDate: string,
  analysis: Section20AnalysisResult,
  documentLink?: string
): Promise<{ eventId: string; webLink: string }> {
  const client = await getOutlookClient();
  const deadline = new Date(deadlineDate);
  const eventStart = new Date(deadline.getTime() - 60 * 60 * 1000); // 1 hour before deadline
  const eventEnd = deadline;

  let eventData: MajorWorksCalendarEvent;

  switch (stage) {
    case 'notice_of_intention':
      eventData = {
        subject: `🏗️ Section 20 Notice Period Ends - ${buildingName}`,
        start: eventStart.toISOString(),
        end: eventEnd.toISOString(),
        body: `
Section 20 Consultation - Notice of Intention Period Ending

Building: ${buildingName}
Project: ${projectTitle}
Consultation Period Ends: ${deadline.toLocaleDateString('en-GB')}

ACTIONS REQUIRED:
• Review any leaseholder responses received
• Prepare Statement of Estimates (Stage 2)
• Contact contractors for detailed quotes
• Schedule tender process if not already done

Project Details:
${analysis.workDetails.scope || 'Major works as described in notice'}

${analysis.estimatedCost ? `Estimated Budget: £${analysis.estimatedCost.toLocaleString()}` : ''}

${documentLink ? `View Original Notice: ${documentLink}` : ''}

This is a Section 20 Landlord and Tenant Act 1985 consultation deadline.
Failure to follow the process may result in recovery restrictions.

Generated by BlocIQ Major Works System
        `.trim(),
        reminderMinutesBeforeStart: 10080, // 7 days before
        categories: ['Major Works', 'Section 20', 'Consultation'],
        importance: 'high',
        isReminderOn: true,
        location: buildingName
      };
      break;

    case 'statement_of_estimates':
      eventData = {
        subject: `📊 Leaseholder Summary Due - ${buildingName}`,
        start: eventStart.toISOString(),
        end: eventEnd.toISOString(),
        body: `
Section 20 Consultation - Statement of Estimates Summary Due

Building: ${buildingName}
Project: ${projectTitle}
Summary Due: ${deadline.toLocaleDateString('en-GB')}

ACTIONS REQUIRED:
• Send leaseholder summary of estimates received
• Include details of all contractor quotes
• Provide 30-day response period for leaseholder observations
• Prepare for contractor appointment

Estimates Received:
${analysis.contractors.map(c => `• ${c.name}: £${c.estimatedCost?.toLocaleString() || 'TBC'}`).join('\n')}

${analysis.leaseholderContribution ? `Estimated Leaseholder Contribution: £${analysis.leaseholderContribution.amount?.toLocaleString() || 'TBC'}` : ''}

${documentLink ? `View Estimates Document: ${documentLink}` : ''}

This is a Section 20 Landlord and Tenant Act 1985 consultation requirement.

Generated by BlocIQ Major Works System
        `.trim(),
        reminderMinutesBeforeStart: 4320, // 3 days before
        categories: ['Major Works', 'Section 20', 'Leaseholder Summary'],
        importance: 'high',
        isReminderOn: true,
        location: buildingName
      };
      break;

    case 'award_of_contract':
      eventData = {
        subject: `🚧 Works Start - ${buildingName}`,
        start: eventStart.toISOString(),
        end: eventEnd.toISOString(),
        body: `
Major Works Commencement - ${projectTitle}

Building: ${buildingName}
Contractor: ${analysis.contractors[0]?.name || 'TBC'}
Works Start: ${deadline.toLocaleDateString('en-GB')}

ACTIONS REQUIRED:
• Confirm contractor site access arrangements
• Notify all leaseholders of works commencement
• Set up project monitoring schedule
• Arrange site meetings and progress reviews

Contract Details:
${analysis.contractors[0] ? `Appointed Contractor: ${analysis.contractors[0].name}` : ''}
${analysis.estimatedCost ? `Contract Value: £${analysis.estimatedCost.toLocaleString()}` : ''}
${analysis.workDetails.duration ? `Expected Duration: ${analysis.workDetails.duration}` : ''}

${documentLink ? `View Contract Award: ${documentLink}` : ''}

Generated by BlocIQ Major Works System
        `.trim(),
        reminderMinutesBeforeStart: 1440, // 1 day before
        categories: ['Major Works', 'Works Commencement', 'Project Management'],
        importance: 'normal',
        isReminderOn: true,
        location: buildingName
      };
      break;

    default:
      throw new Error(`Unsupported stage for calendar event: ${stage}`);
  }

  try {
    const response = await client.api('/me/events').post(eventData);
    return {
      eventId: response.id,
      webLink: response.webLink || ''
    };
  } catch (error) {
    console.error('Failed to create major works calendar event:', error);
    throw new Error(`Failed to create Outlook calendar event: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}

/**
 * Create task for major works project management
 */
export async function createMajorWorksTask(
  stage: Section20Stage,
  buildingName: string,
  projectTitle: string,
  analysis: Section20AnalysisResult,
  dueDate?: string
): Promise<{ taskId: string; webLink: string }> {
  const client = await getOutlookClient();

  let taskData: MajorWorksTask;

  switch (stage) {
    case 'notice_of_intention':
      taskData = {
        subject: `📝 Prepare Statement of Estimates - ${buildingName}`,
        body: `
Section 20 Consultation - Prepare Stage 2

Building: ${buildingName}
Project: ${projectTitle}

TASKS TO COMPLETE:
□ Review consultation responses from leaseholders
□ Contact contractors for detailed estimates
□ Gather at least 2 estimates (3+ recommended)
□ Prepare Statement of Estimates document
□ Schedule Stage 2 consultation

Project Scope:
${analysis.workDetails.scope || 'As described in Notice of Intention'}

${analysis.estimatedCost ? `Budget: £${analysis.estimatedCost.toLocaleString()}` : ''}

Next Deadline: ${analysis.timeline.consultationDeadline || 'TBC'}

Generated by BlocIQ Major Works System
        `.trim(),
        dueDateTime: dueDate ? new Date(dueDate).toISOString() : new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),
        importance: 'high',
        categories: ['Major Works', 'Section 20', 'Project Management'],
        status: 'notStarted'
      };
      break;

    case 'statement_of_estimates':
      taskData = {
        subject: `📧 Send Leaseholder Summary - ${buildingName}`,
        body: `
Section 20 Consultation - Leaseholder Communication

Building: ${buildingName}
Project: ${projectTitle}

TASKS TO COMPLETE:
□ Prepare leaseholder summary document
□ Include all contractor estimates received
□ Calculate individual leaseholder contributions
□ Send to all affected leaseholders
□ Provide 30-day response period
□ Prepare for contractor appointment

Estimates Summary:
${analysis.contractors.map(c => `• ${c.name}: £${c.estimatedCost?.toLocaleString() || 'TBC'}`).join('\n')}

${analysis.leaseholderContribution ? `Est. Leaseholder Contribution: £${analysis.leaseholderContribution.amount?.toLocaleString() || 'TBC'}` : ''}

Generated by BlocIQ Major Works System
        `.trim(),
        dueDateTime: dueDate ? new Date(dueDate).toISOString() : new Date(Date.now() + 3 * 24 * 60 * 60 * 1000).toISOString(),
        importance: 'high',
        categories: ['Major Works', 'Section 20', 'Leaseholder Communication'],
        status: 'notStarted'
      };
      break;

    case 'award_of_contract':
      taskData = {
        subject: `🔧 Project Setup - ${buildingName}`,
        body: `
Major Works Project Management Setup

Building: ${buildingName}
Project: ${projectTitle}
Contractor: ${analysis.contractors[0]?.name || 'TBC'}

TASKS TO COMPLETE:
□ Send works commencement notice to leaseholders
□ Arrange contractor site access
□ Set up progress monitoring schedule
□ Schedule first site meeting
□ Confirm insurance and health & safety arrangements
□ Establish communication protocols

Contract Details:
${analysis.contractors[0] ? `Contractor: ${analysis.contractors[0].name}` : ''}
${analysis.estimatedCost ? `Value: £${analysis.estimatedCost.toLocaleString()}` : ''}
${analysis.workDetails.startDate ? `Start: ${analysis.workDetails.startDate}` : ''}

Generated by BlocIQ Major Works System
        `.trim(),
        dueDateTime: dueDate ? new Date(dueDate).toISOString() : new Date(Date.now() + 14 * 24 * 60 * 60 * 1000).toISOString(),
        importance: 'normal',
        categories: ['Major Works', 'Project Management', 'Contractor Coordination'],
        status: 'notStarted'
      };
      break;

    default:
      throw new Error(`Unsupported stage for task creation: ${stage}`);
  }

  try {
    const response = await client.api('/me/todo/lists/tasks/tasks').post(taskData);
    return {
      taskId: response.id,
      webLink: response.webLink || ''
    };
  } catch (error) {
    console.error('Failed to create major works task:', error);
    throw new Error(`Failed to create Outlook task: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}

/**
 * Create draft email for leaseholder communication
 */
export async function createLeaseholderEmail(
  stage: Section20Stage,
  buildingName: string,
  projectTitle: string,
  analysis: Section20AnalysisResult,
  recipients: string[],
  attachmentData?: {
    name: string;
    content: string;
    contentType: string;
  }
): Promise<{ messageId: string; webLink: string }> {
  const client = await getOutlookClient();

  let emailData: MajorWorksEmail;

  switch (stage) {
    case 'notice_of_intention':
      emailData = {
        subject: `Major Works - Section 20 Notice of Intention - ${buildingName}`,
        body: `
Dear Leaseholder,

RE: ${buildingName} - Major Works Section 20 Consultation

We are writing to inform you of proposed major works to the above property in accordance with Section 20 of the Landlord and Tenant Act 1985.

PROJECT DETAILS:
Building: ${buildingName}
Works Description: ${analysis.workDetails.scope || projectTitle}
${analysis.estimatedCost ? `Estimated Cost: £${analysis.estimatedCost.toLocaleString()}` : ''}

CONSULTATION PERIOD:
This notice begins a 90-day consultation period during which you may:
• Make written observations about the proposed works
• Nominate a contractor to provide an estimate
• Request additional information about the works

The consultation period ends on: ${analysis.timeline.consultationDeadline || '[DATE TO BE CONFIRMED]'}

YOUR RIGHTS:
Under Section 20 of the Landlord and Tenant Act 1985, we must consult with leaseholders before carrying out works where the cost to any leaseholder exceeds £250.

${analysis.leaseholderContribution?.amount ? `Your estimated contribution: £${analysis.leaseholderContribution.amount.toLocaleString()}` : ''}

If you wish to make observations or nominate a contractor, please respond in writing by the consultation deadline.

Please find attached the formal Notice of Intention with full details of the proposed works.

Yours sincerely,
[Property Management Team]

---
This email was generated by BlocIQ Major Works Management System
If you have any questions, please contact your property manager.
        `.trim(),
        toRecipients: recipients.map(email => ({
          emailAddress: { address: email }
        })),
        importance: 'high',
        categories: ['Major Works', 'Section 20', 'Leaseholder Communication'],
        attachments: attachmentData ? [{
          name: attachmentData.name,
          contentBytes: attachmentData.content,
          contentType: attachmentData.contentType
        }] : undefined
      };
      break;

    case 'statement_of_estimates':
      emailData = {
        subject: `Major Works - Section 20 Statement of Estimates - ${buildingName}`,
        body: `
Dear Leaseholder,

RE: ${buildingName} - Major Works Section 20 Consultation - Statement of Estimates

Following our Notice of Intention, we have now received estimates for the proposed major works and are required to provide you with this Statement of Estimates.

PROJECT: ${projectTitle}
BUILDING: ${buildingName}

ESTIMATES RECEIVED:
${analysis.contractors.map((c, i) => `${i + 1}. ${c.name}: £${c.estimatedCost?.toLocaleString() || 'TBC'}\n   ${c.description || ''}`).join('\n')}

${analysis.leaseholderContribution?.amount ? `YOUR ESTIMATED CONTRIBUTION: £${analysis.leaseholderContribution.amount.toLocaleString()}` : ''}

CONSULTATION RIGHTS:
You have 30 days from the date of this notice to:
• Make written observations about the estimates
• Comment on the proposed contractor selection
• Raise any concerns about the works

Response deadline: [30 DAYS FROM DATE OF NOTICE]

NEXT STEPS:
After the consultation period, we will consider all observations received and appoint a contractor to carry out the works. We will notify you of the appointment and planned commencement date.

Please find attached the full Statement of Estimates with detailed breakdowns.

Yours sincerely,
[Property Management Team]

---
This email was generated by BlocIQ Major Works Management System
        `.trim(),
        toRecipients: recipients.map(email => ({
          emailAddress: { address: email }
        })),
        importance: 'high',
        categories: ['Major Works', 'Section 20', 'Statement of Estimates'],
        attachments: attachmentData ? [{
          name: attachmentData.name,
          contentBytes: attachmentData.content,
          contentType: attachmentData.contentType
        }] : undefined
      };
      break;

    case 'award_of_contract':
      emailData = {
        subject: `Major Works - Contractor Appointed - Works Commencement - ${buildingName}`,
        body: `
Dear Leaseholder,

RE: ${buildingName} - Major Works - Contractor Appointment and Works Commencement

Following the Section 20 consultation process, we are writing to inform you that a contractor has been appointed to carry out the major works.

PROJECT: ${projectTitle}
BUILDING: ${buildingName}
APPOINTED CONTRACTOR: ${analysis.contractors[0]?.name || '[CONTRACTOR NAME]'}
${analysis.estimatedCost ? `FINAL CONTRACT VALUE: £${analysis.estimatedCost.toLocaleString()}` : ''}

WORKS SCHEDULE:
Start Date: ${analysis.timeline.worksStartDate || '[TO BE CONFIRMED]'}
${analysis.workDetails.duration ? `Expected Duration: ${analysis.workDetails.duration}` : ''}
${analysis.timeline.estimatedCompletion ? `Expected Completion: ${analysis.timeline.estimatedCompletion}` : ''}

${analysis.leaseholderContribution?.amount ? `YOUR FINAL CONTRIBUTION: £${analysis.leaseholderContribution.amount.toLocaleString()}` : ''}

WHAT TO EXPECT:
• You will receive formal invoicing once works are completed
• Regular progress updates will be provided
• Site access arrangements will be coordinated with residents
• Any disruptions will be minimized where possible

CONTACT INFORMATION:
For any questions during the works, please contact:
• Property Manager: [CONTACT DETAILS]
• Site Manager: [TO BE PROVIDED]

We thank you for your patience during the consultation process and the upcoming works period.

Yours sincerely,
[Property Management Team]

---
This email was generated by BlocIQ Major Works Management System
        `.trim(),
        toRecipients: recipients.map(email => ({
          emailAddress: { address: email }
        })),
        importance: 'normal',
        categories: ['Major Works', 'Works Commencement', 'Contractor Appointment'],
        attachments: attachmentData ? [{
          name: attachmentData.name,
          contentBytes: attachmentData.content,
          contentType: attachmentData.contentType
        }] : undefined
      };
      break;

    default:
      throw new Error(`Unsupported stage for email creation: ${stage}`);
  }

  try {
    // Create draft email (don't send automatically)
    const response = await client.api('/me/messages').post(emailData);
    return {
      messageId: response.id,
      webLink: response.webLink || ''
    };
  } catch (error) {
    console.error('Failed to create major works email:', error);
    throw new Error(`Failed to create Outlook email: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}

/**
 * Create comprehensive major works project setup with all Outlook integrations
 */
export async function createMajorWorksProjectIntegration(
  stage: Section20Stage,
  buildingName: string,
  projectTitle: string,
  analysis: Section20AnalysisResult,
  leaseholderEmails: string[] = [],
  documentAttachment?: {
    name: string;
    content: string;
    contentType: string;
  }
): Promise<{
  calendarEventId?: string;
  taskId?: string;
  emailId?: string;
  integrationSummary: string;
}> {
  const results = {
    calendarEventId: undefined as string | undefined,
    taskId: undefined as string | undefined,
    emailId: undefined as string | undefined,
    integrationSummary: ''
  };

  const integrationSteps: string[] = [];

  try {
    // 1. Create calendar event for deadline
    if (analysis.timeline.consultationDeadline || analysis.timeline.worksStartDate) {
      const deadlineDate = analysis.timeline.consultationDeadline || analysis.timeline.worksStartDate!;
      const calendarResult = await createSection20CalendarEvent(
        stage,
        buildingName,
        projectTitle,
        deadlineDate,
        analysis
      );
      results.calendarEventId = calendarResult.eventId;
      integrationSteps.push('✅ Calendar event created for deadline tracking');
    }

    // 2. Create task for project management
    const taskResult = await createMajorWorksTask(
      stage,
      buildingName,
      projectTitle,
      analysis,
      analysis.timeline.consultationDeadline || analysis.timeline.worksStartDate
    );
    results.taskId = taskResult.taskId;
    integrationSteps.push('✅ Task created for project management');

    // 3. Create draft email for leaseholders (if emails provided)
    if (leaseholderEmails.length > 0) {
      const emailResult = await createLeaseholderEmail(
        stage,
        buildingName,
        projectTitle,
        analysis,
        leaseholderEmails,
        documentAttachment
      );
      results.emailId = emailResult.messageId;
      integrationSteps.push('✅ Draft email created for leaseholder communication');
    }

    results.integrationSummary = integrationSteps.join('\n');

  } catch (error) {
    console.error('Major works integration error:', error);
    integrationSteps.push(`❌ Integration error: ${error instanceof Error ? error.message : 'Unknown error'}`);
    results.integrationSummary = integrationSteps.join('\n');
  }

  return results;
}