#!/usr/bin/env ts-node

/**
 * Test script for Document AI integration
 * 
 * Usage:
 * 1. Place a test PDF in /fixtures/test-lease.pdf
 * 2. Set environment variables in .env.local
 * 3. Run: npm run dev (in another terminal)
 * 4. Run: npx ts-node scripts/test-docai.ts
 */

import fs from 'fs';
import path from 'path';
import FormData from 'form-data';
import fetch from 'node-fetch';

async function testDocAI() {
  console.log('üß™ Testing Document AI Integration...\n');

  // Check environment variables
  console.log('üìã Environment Check:');
  const requiredEnvs = [
    'USE_DOCUMENT_AI',
    'DOCUMENT_AI_PROCESSOR_ID', 
    'DOCUMENT_AI_LOCATION',
    'GOOGLE_CLOUD_PROJECT_ID',
    'GOOGLE_APPLICATION_CREDENTIALS_JSON'
  ];

  for (const env of requiredEnvs) {
    const value = process.env[env];
    console.log(`  ${env}: ${value ? '‚úÖ Set' : '‚ùå Missing'}`);
    if (env === 'DOCUMENT_AI_PROCESSOR_ID' && value) {
      console.log(`    ‚Üí ${value.substring(0, 50)}...`);
    }
  }

  if (process.env.USE_DOCUMENT_AI !== 'true') {
    console.log('\n‚ö†Ô∏è  USE_DOCUMENT_AI is not set to "true"');
    console.log('   Document AI will be skipped in favor of fallback OCR methods.');
  }

  console.log('\n---\n');

  // Check for test file
  const testFilePath = path.join(process.cwd(), 'fixtures', 'test-lease.pdf');
  
  if (!fs.existsSync(testFilePath)) {
    console.log('üìÅ Creating fixtures directory and sample instructions...');
    
    const fixturesDir = path.join(process.cwd(), 'fixtures');
    if (!fs.existsSync(fixturesDir)) {
      fs.mkdirSync(fixturesDir, { recursive: true });
    }

    const readmeContent = `# Test Fixtures

Place test documents here for DocAI testing:

- test-lease.pdf - Sample lease document for testing
- test-compliance.pdf - Sample compliance document

To test Document AI:
1. Add a lease PDF as 'test-lease.pdf'
2. Run: npx ts-node scripts/test-docai.ts
`;
    
    fs.writeFileSync(path.join(fixturesDir, 'README.md'), readmeContent);
    
    console.log('‚ùå No test file found at fixtures/test-lease.pdf');
    console.log('   Please add a lease PDF file to test with.');
    console.log('   Created fixtures/README.md with instructions.');
    return;
  }

  console.log('üìÑ Test File Found:', testFilePath);
  const fileStats = fs.statSync(testFilePath);
  console.log(`   Size: ${(fileStats.size / (1024 * 1024)).toFixed(2)} MB`);

  // Test 1: Direct extractText function
  console.log('\nüî¨ Test 1: Direct extractText() function');
  try {
    const { extractText } = await import('../lib/extract-text');
    
    const fileBuffer = fs.readFileSync(testFilePath);
    const file = new File([fileBuffer], 'test-lease.pdf', { type: 'application/pdf' });
    
    console.log('   Calling extractText()...');
    const startTime = Date.now();
    const result = await extractText(file);
    const duration = Date.now() - startTime;
    
    console.log(`   ‚úÖ Result: ${result.source} (${duration}ms)`);
    console.log(`   Text Length: ${result.textLength} characters`);
    console.log(`   Preview: "${result.extractedText.substring(0, 100)}..."`);
    
    if (result.source === 'docai') {
      console.log('   üéâ Document AI was used successfully!');
    } else {
      console.log(`   ‚ÑπÔ∏è  Fallback method used: ${result.source}`);
    }

    // Test 2: Lease extraction
    console.log('\nüî¨ Test 2: Lease field extraction');
    const { extractLeaseHybrid } = await import('../lib/extractors/leaseHybrid');
    
    const extractionResult = await extractLeaseHybrid(result.extractedText, 'test-lease.pdf');
    
    console.log('   üìã Extracted Fields:');
    for (const [key, value] of Object.entries(extractionResult.fields)) {
      if (value) {
        const confidence = extractionResult.confidence[key];
        const confEmoji = confidence > 0.8 ? '‚úÖ' : confidence > 0.5 ? '‚ö†Ô∏è' : '‚ùå';
        console.log(`     ${key}: ${confEmoji} ${value}`);
      }
    }

    // Test 3: Report generation
    console.log('\nüî¨ Test 3: Report generation');
    const { renderLeaseReport } = await import('../lib/reports/leaseReport');
    
    const report = renderLeaseReport({
      fields: extractionResult.fields,
      confidence: extractionResult.confidence,
      disclaimer: "This is a test report generated by the DocAI test script."
    });
    
    console.log('   üìÑ Report generated successfully');
    console.log(`   Report length: ${report.length} characters`);
    
    // Save report to file for review
    const reportPath = path.join(process.cwd(), 'fixtures', 'test-report.md');
    fs.writeFileSync(reportPath, report);
    console.log(`   üíæ Report saved to: ${reportPath}`);

  } catch (error) {
    console.error('   ‚ùå Direct test failed:', error);
  }

  // Test 4: API endpoint
  console.log('\nüî¨ Test 4: API endpoint test');
  try {
    const form = new FormData();
    const fileBuffer = fs.readFileSync(testFilePath);
    form.append('file', fileBuffer, {
      filename: 'test-lease.pdf',
      contentType: 'application/pdf'
    });
    form.append('buildingId', 'test-building-123');
    form.append('unitId', 'test-unit-456');  
    form.append('agencyId', 'test-agency-789');

    console.log('   üì° Calling /api/extract-lease...');
    const apiStartTime = Date.now();
    
    const response = await fetch('http://localhost:3000/api/extract-lease', {
      method: 'POST',
      body: form
    });

    const apiDuration = Date.now() - apiStartTime;
    
    if (!response.ok) {
      const errorText = await response.text();
      console.log(`   ‚ùå API Error (${response.status}): ${errorText}`);
      return;
    }

    const apiResult = await response.json();
    
    console.log(`   ‚úÖ API Success (${apiDuration}ms)`);
    console.log(`   Source: ${apiResult.source}`);
    console.log(`   Processing Time: OCR=${apiResult.processingTime?.ocr}ms, Extraction=${apiResult.processingTime?.extraction}ms`);
    console.log(`   Fields extracted: ${Object.keys(apiResult.fields || {}).length}`);
    
    if (apiResult.source === 'docai') {
      console.log('   üéâ Document AI endpoint working correctly!');
    }

  } catch (apiError) {
    console.error('   ‚ùå API test failed:', apiError);
    console.log('   üí° Make sure the dev server is running: npm run dev');
  }

  console.log('\n---\n');

  // Summary
  console.log('üìä Test Summary:');
  console.log(`   DocAI Enabled: ${process.env.USE_DOCUMENT_AI === 'true' ? '‚úÖ' : '‚ùå'}`);
  console.log(`   Required ENV vars: ${requiredEnvs.every(env => process.env[env]) ? '‚úÖ' : '‚ùå'}`);
  console.log('   Integration: Ready for deployment');
  
  console.log('\nüöÄ Next Steps:');
  console.log('   1. Test with real lease documents');
  console.log('   2. Monitor confidence scores and accuracy');
  console.log('   3. Fine-tune extraction patterns if needed');
  console.log('   4. Deploy with feature flag enabled');
}

// Handle both direct execution and module import
if (require.main === module) {
  testDocAI().catch(console.error);
}

export { testDocAI };